[
  {
    "id": 1,
    "example": "CREATE TABLE <example_table> (id INT AUTO_INCREMENT)",
    "rewrite": "CREATE SEQUENCE <example_table>_id_seq\n    OPTIONS (sequence_kind = 'bit_reversed_positive');\nCREATE TABLE t (id INT64 DEFAULT (GET_NEXT_SEQUENCE_VALUE(SEQUENCE <example_table>_id_seq));"
  },
  {
    "id": 2,
    "example": "java.sql.Timestamp",
    "rewrite": "java.sql.Timestamp /* Spanner supports JDBC native types, these should be used directly by Spanner */"
  },
  {
    "id": 3,
    "example": "int recordId",
    "rewrite": "int recordId /* Spanner natively supports integer IDs */"
  },
  {
    "id": 4,
    "example": "#include <grpcpp/grpcpp.h>",
    "rewrite": "#include <grpcpp/grpcpp.h> /* gRPC usage is usually not Spanner-related, it does not need to be translated to support other databases. */"
  },
  {
    "id": 5,
    "example": "SELECT LAST_INSERT_ID()",
    "rewrite": "INSERT <...> RETURNING <table_id_column> /* Use a sequence with CREATE SEQUENCE for IDs.  Spanner no longer requires UUID-based PKs.  PKs and IDs can be of type INT. */"
  },
  {
    "id": 6,
    "example": "connection.setAutoCommit(false);",
    "rewrite": "connection.setAutoCommit(false);  /* Spanner recommends disabling autocommit unless the transaction only consists of a single statement */"
  },
  {
    "id": 7,
    "example": "connection.commit();",
    "rewrite": "connection.commit(); /* Spanner recommends explicitly creating and committing transactions.  If the transaction doesn't contain any DML, use a read-only transaction, and consider a stale-read transaction for performance. */"
  }
]
